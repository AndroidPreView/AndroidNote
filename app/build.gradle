apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'com.antfortune.freeline'
apply plugin: 'com.jakewharton.hugo'

//Groovy 的基本语法
//方法调用
//以上语句中的apply是一个方法，给它传递了一个参数plugin，plugin 的值
//闭包
//Groovy中花括号包含的部分成为一个闭包（Closure）。例如下面的代码
//compileOptions 是一个 Method， 它的参数是一个闭包
android {
    def globalConfiguration = rootProject.ext.android
    compileSdkVersion globalConfiguration.AndroidCompileSdkVersion
    buildToolsVersion globalConfiguration.AndroidBuildToolsVersion

    defaultConfig {
        applicationId globalConfiguration.applicationId
        minSdkVersion globalConfiguration.AndridMinSdkVersion
        targetSdkVersion globalConfiguration.AndroidTargetSdkVersion
        multiDexEnabled true
        resConfigs "zh"
        versionCode globalConfiguration.versionCode
        versionName globalConfiguration.versionName
        //ADD THIS LINE:
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    //构建类型
    buildTypes {
        release {

            // 不显示Log
            //  buildConfigField "boolean", "LOG_DEBUG", "false"
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationIdSuffix 'release' // 设置release时的包名
//            定义库的私有混淆
//            consumerProguardFiles 'consumer-proguard-rules.pro'



        }
    }

//关于Android Studio中点9图的编译错误问题
//    Android Studio内嵌了SDK中的draw9Patch工具，可以直接打开点9图并编辑预览，
// 只需要将引入的点9图四边黑线按要求补全，然后重新Clean一下
// Error:Execution failed for task ':app:mergeDebugResources'.
//    > Some file crunching failed, see logs for details
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    //显示依赖包的存储路径
    task showMeCache << {
        configurations.compile.each { println it }
    }


    //    useLibrary 'org.apache.http.legacy'


    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
//    提示：如果要从增量构建中永久跳过lint检查，可以将其添加到build.gradle中：
    tasks.whenTaskAdded { task ->
        if (task.name.equals("lint")) {
            task.enabled = false
        }
    }

    packagingOptions {
        // Java的注释冲突
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
            res.srcDirs = ['src/main/res/layout/activity',
                           'src/main/res/layout/fragment',
                           'src/main/res/'
            ]
            jni.srcDirs = []
        }

    }
    //开启gradle的增量编译，加快编译。
//    使用递增的dex
//    增加dex的容量.http://stackoverflow.com/questions/25006075/extremely-long-build-with-gradle-android-studio
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
//        incremental true
    }

    signingConfigs {
        debug {

        }
        release {
            //storeFile file("../yourapp.keystore")
            //storePassword "your password"
            //keyAlias "your alias"
            //keyPassword "your password"

            //setting your signing.properties
            //first, add signing.properties to ./app/
            //second, add property STORE_FILE, STORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD
        }
    }
//    设置java版本

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7

    }
}

repositories {
    flatDir {
        dirs 'aars'
    }
}




def propFile = project.rootProject.file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

repositories {
    jcenter()
    maven { url "https://github.com/alter-ego/advanced-android-logger/raw/develop/releases/" }
}

checkstyle {
    toolVersion = "6.14"
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}
//findbugs 分析的是 class 文件，所以就从 classes 配置来找原因。发现 java 和 android 构建后的目录结构是不一样的
//classes = files("$project.buildDir/intermediates/classes")    -----  android
//classes = files("$project.buildDir/classes")                            -----  java

task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
}
//Exclude可以设置不编译指定的模块

//configurations {
//    all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'
//}

def SUPPORT_VERSION = "24.2.0"
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    def googleDependencies = rootProject.ext.goodleDependencies
    def otherDependencies = rootProject.ext.otherDependdencies
    compile googleDependencies.appcompat_v7
    compile 'com.android.support:recyclerview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:design:' + SUPPORT_VERSION
    compile 'com.jakewharton:butterknife:6.0.0'
    compile project(':customview')
//    compile project(':animation')
    //module和aar只能有一个
    compile(name:'animation-release', ext:'aar')
    compile 'com.jiechic.library:xUtils:2.6.14'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4'
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'org.greenrobot:greendao:2.2.0'
    provided 'org.projectlombok:lombok:1.16.6'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.getbase:floatingactionbutton:1.7.0'
    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'

    compile 'com.eftimoff:android-pathview:1.0.8@aar'
    compile project(':hanshenghttpclient')
    compile project(':simplenet')
    compile 'com.github.castorflex.smoothprogressbar:library-circular:1.0.0'
    configurations {
        all*.exclude module: 'android'
    }
    compile 'com.github.ctiao:DanmakuFlameMaster:0.5.0'
    // Image
    compile 'com.github.bumptech.glide:glide:3.7.0'


    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'


    compile 'com.jakewharton.timber:timber:4.3.1'

    compile 'com.orhanobut:hawk:2.0.1'

    // If you want to bind to Android-specific lifecycles
    compile 'com.trello:rxlifecycle-android:1.0'

// If you want pre-written Activities and Fragments you can subclass as providers
    compile 'com.trello:rxlifecycle-components:1.0'

    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

    compile 'com.jakewharton.rxbinding:rxbinding:1.0.0'

    compile 'io.realm:realm-android:0.84.1'

    compile 'com.wanjian:sak:0.0.2'

    // LeanCloud 基础包
    compile('cn.leancloud.android:avoscloud-sdk:v3.+')


    // LeanCloud 应用内搜索包
    compile('cn.leancloud.android:avoscloud-search:v3.+@aar')

    android {
        useLibrary 'org.apache.http.legacy'
    }

    compile 'com.melnykov:floatingactionbutton:1.1.0'

    debugCompile 'com.amitshekhar.android:debug-db:0.4.0'



//    去掉重复依赖,剔除整个组织的库
//    compile 'com.alibaba.fastjson.latest.integration' {
//        exclude module: 'annotations', group: 'com.google.android'
//    }
//    剔除某个库
//    compile('com.android.support:appcompat-v7:23.2.0') {
//        exclude group: 'com.android.support', module: 'support-annotations' // 写全称
//        exclude group: 'com.android.support', module: 'support-compat'
//        exclude group: 'com.android.support', module: 'support-v4'
//        exclude group: 'com.android.support', module: 'support-vector-drawable'
//    }
}




